üìå Resumo ‚Äì Hist√≥rias de Usu√°rio (User Stories)
1Ô∏è‚É£ Introdu√ß√£o ao minicurso

O curso √© dividido em m√≥dulos curtos sobre hist√≥rias de usu√°rio, com exemplos e pr√°ticas.

Base principal: livro User Stories Applied de Mike Cohn, considerado refer√™ncia.

Estrutura do curso:

Boas-vindas e introdu√ß√£o.

Introdu√ß√£o √†s hist√≥rias de usu√°rio.

Exemplos pr√°ticos (sistemas de reserva de viagens, e-commerce, busca de empregos).

Modelagem do papel do usu√°rio (personas, UX).

Diretrizes para escrever boas hist√≥rias (INVEST, Spider).

Planejamento e prioriza√ß√£o em projetos (Scrum, Sprints).

Conclus√µes e defini√ß√µes.

2Ô∏è‚É£ O que √© uma Hist√≥ria de Usu√°rio (User Story)?

Uma hist√≥ria curta do ponto de vista do usu√°rio, descrevendo o valor que ele percebe no produto.

Serve como lembrete ou placeholder:

N√£o √© uma especifica√ß√£o detalhada.

Facilita conversas face a face entre Product Owner (PO) e time de desenvolvimento.

Deve ser curta e entregue rapidamente (ideal: <= 2 semanas).

N√£o substitui documenta√ß√£o completa em setores que exigem auditoria legal (ex.: avia√ß√£o).

3Ô∏è‚É£ Objetivos das Hist√≥rias de Usu√°rio

Capturar requisitos de forma compreens√≠vel pelo cliente.

Incentivar comunica√ß√£o cont√≠nua entre equipe e stakeholders.

Permitir entregas r√°pidas e incrementais do software.

Servir como base para planejamento de Sprints em m√©todos √°geis.

Evitar mal-entendidos da linguagem natural (ambiguidade).

4Ô∏è‚É£ Estrutura de uma User Story

Template cl√°ssico:

Enquanto [papel/usu√°rio], eu quero [a√ß√£o/objetivo] para [benef√≠cio]

Exemplo:

T√≠tulo: Processar pagamento
Descri√ß√£o: Enquanto cliente online, quero pagar pelos itens no meu carrinho para que eu possa receber os produtos.

Partes essenciais:

Quem ‚Üí papel/usu√°rio.

O que ‚Üí objetivo ou a√ß√£o desejada.

Por qu√™ ‚Üí benef√≠cio ou valor que ser√° entregue.

Dicas:

Escrever do ponto de vista do usu√°rio, n√£o do sistema.

Evitar termos t√©cnicos, como banco de dados ou MVC.

Pode ter um verso do cart√£o com detalhes, crit√©rios de aceita√ß√£o ou fluxos, mas n√£o substitui especifica√ß√£o completa.

5Ô∏è‚É£ Compara√ß√£o com Casos de Uso

Hist√≥rias de usu√°rio: informais, curtas, focadas no valor para o usu√°rio.

Casos de uso: detalhados, com fluxos principal e alternativo, ideais para requisitos complexos.

Um caso de uso pode englobar v√°rias hist√≥rias de usu√°rio, mas nem sempre.

Para requisitos simples (CRUD), hist√≥rias de usu√°rio s√£o suficientes; para requisitos complexos, pode-se detalhar em caso de uso.

6Ô∏è‚É£ Vantagens das Hist√≥rias de Usu√°rio

Compreens√≠veis: escritas pelo PO na linguagem do cliente.

Memor√°veis: pequenas hist√≥rias ajudam a lembrar detalhes importantes.

Entreg√°veis rapidamente: permitem planejamento de Sprints √°geis (uma ou duas semanas).

Incentivam design participativo: clientes, testadores e desenvolvedores podem colaborar na mesma hist√≥ria.

Flex√≠veis: suportam desenvolvimento iterativo e incremental.

7Ô∏è‚É£ Por que usar hist√≥rias em vez de documenta√ß√£o extensa

Documenta√ß√£o detalhada n√£o garante software correto ou √∫til.

Linguagem natural √© amb√≠gua; hist√≥rias ajudam a focar na conversa e no entendimento real do requisito.

Evitam o efeito ‚Äútelefone sem fio‚Äù: requisito escrito =/= requisito desejado.

Permitem valida√ß√£o cont√≠nua com o cliente antes da implementa√ß√£o.

8Ô∏è‚É£ Planejamento e Prioridades

Hist√≥rias devem ser priorizadas pelo valor que trazem ao cliente.

Permitem identificar quais devem ser implementadas primeiro em Sprints.

Cada hist√≥ria deve ter tamanho adequado para ser entregue em poucas horas ou dias.

Facilitam entregas incrementais, iterativas e desenvolvimento interativo.

1. Os 3 Cs de Ron Jeffries

Ron Jeffries, um dos criadores do XP (Extreme Programming), prop√¥s que cada hist√≥ria de usu√°rio √© composta por tr√™s elementos: Card (Cart√£o), Conversation (Conversa) e Confirmation (Confirma√ß√£o).

Card (Cart√£o)

Um lembrete f√≠sico ou digital da hist√≥ria.

Cont√©m: t√≠tulo da hist√≥ria, estimativa, observa√ß√µes e, opcionalmente, alguns testes ou crit√©rios de aceita√ß√£o.

Serve apenas para iniciar a conversa, n√£o √© detalhado.

Conversation (Conversa)

A hist√≥ria √© detalhada durante a conversa entre o time e o cliente.

Permite esclarecer os requisitos, discutir alternativas e entender o valor real para o usu√°rio.

Confirmation (Confirma√ß√£o)

Define como o cliente valida que a hist√≥ria foi implementada corretamente.

Geralmente descrita como crit√©rio de aceita√ß√£o ou testes de aceita√ß√£o, que indicam quando a hist√≥ria est√° completa.

2. Crit√©rios de Aceita√ß√£o

Definidos pelo cliente ou Product Owner.

Conjunto de condi√ß√µes que devem ser atendidas para a hist√≥ria ser considerada completa.

Permitem que o time de desenvolvimento saiba exatamente quando o trabalho est√° finalizado.

Podem ser automatizados usando frameworks de BDD (Behavior Driven Development) como Cucumber, em sintaxe Gherkin:

Exemplo de Gherkin:
Dado que o usu√°rio n√£o est√° logado
Quando ele digita nome de usu√°rio v√°lido e senha inv√°lida
Ent√£o o sistema retorna uma mensagem de erro gen√©rica e reexibe o formul√°rio de login

3. Hist√≥rias de usu√°rio t√©cnicas

    Nem todas as hist√≥rias beneficiam diretamente o usu√°rio final.

    Hist√≥rias t√©cnicas suportam requisitos n√£o funcionais, como escalabilidade ou infraestrutura.

    Exemplos:

        Upgrade de servidor de aplica√ß√£o.

        Substitui√ß√£o do banco de dados para suportar mais transa√ß√µes simult√¢neas.

4. Detalhes de uma hist√≥ria de usu√°rio

    Uma hist√≥ria pode ser quebrada em sub-hist√≥rias menores para maior granularidade.

    Detalhes podem ser colocados no verso do cart√£o (ex.: fluxo principal, dados, testes de aceita√ß√£o).

    Quanto menor a hist√≥ria, mais f√°cil de estimar, implementar e testar.

5. Diferen√ßa entre hist√≥rias de usu√°rio e casos de uso
Aspecto	             Hist√≥ria de usu√°rio	                           Caso de uso
Escopo	        Pequeno, entrega em poucos dias	           Maior, pode envolver m√∫ltiplos cen√°rios
Formalidade	    Mais informal	                           Mais detalhado e documentado
Foco	        Benef√≠cio para o usu√°rio	               Registro do requisito e fluxo completo
Quando usar	    Cen√°rios simples ou pequenos objetivos	   Cen√°rios complexos ou que exigem documenta√ß√£o

6. Modelagem do papel do usu√°rio

    Evitar escrever hist√≥rias gen√©ricas para "usu√°rio".

    Identificar pap√©is distintos ajuda a capturar objetivos e necessidades diferentes:

        Ex.: Cliente frequente, administrador, agendador, premium, etc.

    Cada papel tem atributos, habilidades e objetivos espec√≠ficos com o software.

7. Persona

    Representa√ß√£o imagin√°ria e detalhada de um papel de usu√°rio.

    Ajuda a entender melhor o cliente, suas necessidades, prefer√™ncias e comportamento.

    Pode incluir: idade, profiss√£o, frequ√™ncia de uso, objetivos, frustra√ß√µes, dispositivos utilizados.

    Pode-se criar personas principais, secund√°rias e terci√°rias conforme o foco do software.

Exemplo de persona:

    Nome: Jin

    Cargo: Vice-presidente de Marketing

    Frequ√™ncia de viagens: semanal, mesma rota

    Experi√™ncia com software: r√°pida aprendizagem, intolerante a bugs e lentid√£o

    Objetivo: agendar voos com efici√™ncia sem frustra√ß√µes

M√≥dulo 5 ‚Äì Como escrever boas hist√≥rias de usu√°rio (Parte 2)
1. Acr√¥nimo INVEST

O INVEST √© um checklist para verificar se uma hist√≥ria de usu√°rio est√° bem escrita:

I ‚Äì Independente:

Idealmente, cada hist√≥ria deve poder ser planejada e implementada separadamente.

Observa√ß√£o: ‚Äúindependente‚Äù refere-se ao valor entregue, n√£o apenas √† independ√™ncia funcional.

Exemplo:

Hist√≥ria 1: Retornar lista de h√≥spedes online

Hist√≥ria 2: Ordenar lista por ordem alfab√©tica

Apesar da depend√™ncia funcional (ordenar depende da lista existir), cada uma entrega valor independente.

N ‚Äì Negoci√°vel:

Hist√≥rias de usu√°rio s√£o ‚Äúplaceholders‚Äù para conversa, n√£o contratos r√≠gidos.

Escopo e detalhes podem ser ajustados junto ao cliente.

Exemplo: Pagamento por oferta de emprego com cart√£o de cr√©dito ‚Äî as bandeiras aceitas podem ser discutidas.

V ‚Äì Valor:

Toda hist√≥ria deve trazer valor para o usu√°rio ou stakeholders (ex.: empresa, desenvolvedores).

Pode ser valor direto (usu√°rio final) ou indireto (hist√≥rias t√©cnicas para desenvolvedores).

Exemplo: Conex√µes com banco de dados via Connection Pool aumentam desempenho do sistema, valorizando o software para o usu√°rio final.

E ‚Äì Estim√°vel:

√â necess√°rio estimar esfor√ßo de implementa√ß√£o para planejar Sprints.

Dicas:

Estude o dom√≠nio para estimar corretamente.

Crie hist√≥rias menores (evita complexidade excessiva).

Use Spikes (prototipagem) para explorar novas tecnologias ou desafios t√©cnicos antes da estimativa final.

S ‚Äì Small (Pequena):

Hist√≥rias menores facilitam estimativa, planejamento e entrega dentro do Sprint.

Epic: hist√≥rias grandes que precisam ser quebradas em hist√≥rias menores.

Exemplo: Postagem de curr√≠culo ‚Üí grande demais, incluir se√ß√µes separadas de educa√ß√£o, experi√™ncia, publica√ß√µes, etc.

T ‚Äì Test√°vel:

A hist√≥ria deve permitir verifica√ß√£o de cumprimento do crit√©rio de aceita√ß√£o.

Exemplo:

Requisito gen√©rico: ‚ÄúSoftware f√°cil de usar‚Äù ‚Üí dif√≠cil de testar

Melhor: ‚ÄúNovato deve completar funcionalidades sem treinamento‚Äù ‚Üí test√°vel

Performance: ‚ÄúNovas telas devem aparecer em at√© 2 segundos em 95% dos acessos‚Äù

2. Observa√ß√µes importantes

Detalhes complexos devem ser colocados no verso do cart√£o ou documentados como crit√©rios de aceita√ß√£o e testes.

Evitar excesso de detalhes na frente da hist√≥ria, mas tamb√©m n√£o deixar muito gen√©rico.

Hist√≥rias t√©cnicas e regulat√≥rias tamb√©m seguem INVEST, mas podem n√£o seguir o template ‚ÄúComo [papel] eu quero [a√ß√£o] para [valor]‚Äù.

Quebrar hist√≥rias grandes ajuda a manter velocidade m√©dia de entrega do time (m√©trica de Sprint e velocidade).

3. Exemplos pr√°ticos

Pagamento por cart√£o:

Frente do cart√£o: ‚ÄúComo empresa, quero pagar por uma oferta de emprego com cart√£o de cr√©dito‚Äù

Verso do cart√£o: bandeiras aceitas, regras de valida√ß√£o, testes automatizados

Connection Pool:

Hist√≥ria t√©cnica: ‚ÄúAt√© 50 usu√°rios devem usar a aplica√ß√£o com apenas 5 licen√ßas de banco de dados‚Äù

Benef√≠cio: melhora desempenho e gest√£o de licen√ßas.

Tratamento de erros:

Hist√≥ria t√©cnica: padronizar logs e mensagens de erro

Valor: consist√™ncia para o usu√°rio final e manuten√ß√£o do software.
1. Quebrando hist√≥rias grandes com SPIDER

SPIDER √© uma t√©cnica para dividir √©picos ou hist√≥rias grandes em hist√≥rias menores, entreg√°veis dentro de um Sprint, sem quebrar por camadas funcionais (ex.: apenas interface ou apenas banco de dados). Cada letra do SPIDER representa uma abordagem para quebrar hist√≥rias:

S ‚Äì Size (Tamanho)

Hist√≥rias muito grandes podem prejudicar a velocidade do time.

Se a hist√≥ria √© gigante, √© arriscado que n√£o seja conclu√≠da no Sprint.

Dividir hist√≥rias grandes em menores ajuda a estimar, planejar e motivar o time, entregando valor mais r√°pido para o cliente.

T√©cnicas:

Criar spikes: prot√≥tipos ou pesquisas para entender requisitos complexos.

Dividir caminhos da hist√≥ria (cen√°rios principais e alternativos).

P ‚Äì Paths (Caminhos)

Quebra a hist√≥ria em diferentes caminhos ou cen√°rios:

Ex.: Sistema de pagamento:

Cart√£o de cr√©dito ‚Üí Visa

Cupom de desconto

PayPal

Cada caminho vira uma hist√≥ria menor e implement√°vel.

I ‚Äì Interfaces

Quebra por tipo de interface ou dispositivo:

Web, Android, iOS

Diferentes navegadores (Chrome, Edge, etc.)

Tamb√©m se aplica a diferentes formatos de dados (CSV, XML, Excel).

D ‚Äì Data (Dados)

Quebra a hist√≥ria baseada em dados ou formul√°rios:

Ex.: Cadastro de cliente:

Primeiro Sprint ‚Üí informa√ß√µes de endere√ßo

Segundo Sprint ‚Üí informa√ß√µes de pagamento

Permite entregar valor incremental sem esperar completar todo o cadastro.

E ‚Äì Exceptions / Rules (Regras)

Quebra baseada em regras de neg√≥cio:

Requisitos complexos podem ser implementados parcialmente.

Ex.: Algoritmo complexo pode ser feito em etapas, implementando primeiro a parte mais simples.

2. Diretrizes para boas hist√≥rias de usu√°rio

Essas diretrizes v√™m do livro do Mike Cohn (e complementadas com pr√°ticas atuais):

Objetivo

Sempre inicie com o objetivo do usu√°rio:

Ex.: ‚ÄúEnquanto pessoa que procura emprego, quero postar meu curr√≠culo para me candidatar a vagas.‚Äù


O objetivo guia a implementa√ß√£o e garante valor entregue ao cliente.

Fatiamento vertical

Evite quebrar por camadas funcionais (UI, l√≥gica, banco de dados separadamente).

Prefira fatiar verticalmente, passando por todas as camadas da aplica√ß√£o.

Ex.: Submeter curr√≠culo ‚Üí tela, l√≥gica de neg√≥cio, banco de dados.

Evite hist√≥rias operacionais

Hist√≥rias cont√≠nuas e repetitivas (‚Äúgerenciar ofertas de emprego‚Äù) n√£o s√£o boas hist√≥rias de usu√°rio.

Prefira escrever hist√≥rias que demonstrem valor imediato ao usu√°rio.

Restri√ß√µes

Documente requisitos n√£o funcionais e restri√ß√µes:

Ex.: Tempo m√°ximo de transa√ß√£o, disponibilidade do sistema, compatibilidade com vers√µes.

Restri√ß√µes s√£o cr√≠ticas para o sucesso do requisito.

Horizonte de detalhamento

Detalhe hist√≥rias apenas para os pr√≥ximos 2‚Äì3 Sprints.

Requisitos muito √† frente n√£o precisam ser detalhados.

Para itens futuros importantes, escreva como √©picos ou temas.

Evite detalhes de UI no requisito

Descrever menus suspensos, bot√µes ou layouts trava a criatividade do desenvolvedor.

Prefira mostrar prot√≥tipos ou wireframes.

Papel do usu√°rio

Sempre especifique o papel do ator:

Correto: ‚ÄúEnquanto aluno, quero me inscrever em disciplina‚Ä¶‚Äù

Incorreto: ‚ÄúEnquanto usu√°rio, quero‚Ä¶‚Äù (gen√©rico demais).

Cuidado com plural

Use singular para evitar ambiguidades:

Correto: ‚ÄúUma pessoa que procura emprego pode postar seu curr√≠culo.‚Äù

Incorreto: ‚ÄúPessoas que procuram emprego podem postar curr√≠culos.‚Äù

Hist√≥rias como lembrete

Hist√≥ria de usu√°rio √© placeholder para conversa com o cliente.

O texto da hist√≥ria √© menos importante que a discuss√£o com o cliente.

‚úÖ Resumo pr√°tico

SPIDER ajuda a quebrar √©picos em hist√≥rias menores e entreg√°veis.

Fatiamento vertical + valor incremental ‚Üí menor risco arquitetural e maior motiva√ß√£o do time.

Hist√≥rias bem escritas seguem regras claras: objetivo, papel do usu√°rio, valor, restri√ß√µes, tamanho adequado e simplicidade.

M√≥dulo 6: Planejamento de hist√≥rias de usu√°rio
1. Contexto de projeto

Projetos t√™m in√≠cio e fim e s√£o divididos em sprints (per√≠odos de entrega de valor).

O Product Backlog cont√©m o conjunto de hist√≥rias de usu√°rio, priorizado conforme valor e necessidade.

Desafio: o backlog √†s vezes n√£o mostra claramente a rela√ß√£o entre hist√≥rias ou requisitos de um mesmo tema.

2. User Story Map (Mapa de hist√≥rias de usu√°rio)

Artefato complementar ao Product Backlog.

Permite visualizar:

Rela√ß√µes entre hist√≥rias de usu√°rio;

Hierarquia e granularidade (temas ‚Üí epics ‚Üí hist√≥rias);

Sequ√™ncia l√≥gica de uso do sistema.

Estrutura:

Temas: requisitos de mais alto n√≠vel (abstratos).

Epics: agrupamento de funcionalidades dentro de um tema.

Hist√≥rias de usu√°rio: unidades menores, implement√°veis em sprints.

A disposi√ß√£o visual √© de cima para baixo (mais detalhes) e da esquerda para a direita (sequ√™ncia l√≥gica).

Possibilita determinar:

MVP (Produto M√≠nimo Vi√°vel): funcionalidades essenciais para entregar valor ao cliente.

Roadmap e milestones: marcos importantes do projeto.

3. Workshops de hist√≥rias de usu√°rio

Reuni√µes espec√≠ficas para identifica√ß√£o e detalhamento de requisitos.

Dicas para condu√ß√£o:

Ter vis√£o clara do produto e roadmap inicial.

Usar personas para entender melhor o cliente.

Focar apenas nos requisitos do horizonte curto (2-3 sprints).

Escrever crit√©rios de aceita√ß√£o (AC) no verso da hist√≥ria de usu√°rio.

Evitar hist√≥rias muito grandes (dividi-las em unidades menores).

Garantir a presen√ßa dos stakeholders corretos e ambiente adequado (arejado, coffee breaks, engajamento).

M√≥dulo 7: Conclus√£o e gloss√°rio
Principais defini√ß√µes:

Hist√≥ria de usu√°rio (User Story): relato curto do ponto de vista do usu√°rio sobre valor esperado.

Feature / Epic: grupo de hist√≥rias de usu√°rio; hist√≥ria maior que deve ser quebrada em unidades menores.

Hist√≥ria de usu√°rio t√©cnica: n√£o traz valor direto ao cliente, mas agrega valor ao neg√≥cio ou desenvolvedor (ex.: escalabilidade, performance).

Product Backlog: cont√©m tr√™s n√≠veis de requisitos funcionais:

Temas (mais amplos)

Epics / Features (grupos de funcionalidades)

Hist√≥rias de usu√°rio (implement√°veis em sprints)

Boas pr√°ticas gerais

Sempre escrever crit√©rios de aceita√ß√£o para cada hist√≥ria.

Detalhar apenas o que ser√° necess√°rio nos pr√≥ximos sprints.

Usar US Story Map para visualizar relacionamentos e prioriza√ß√£o.

Identificar MVP e roadmap de entregas com milestones.

Hist√≥rias t√©cnicas podem ser estrat√©gicas e devem ser priorizadas quando trazem valor indireto.

Refer√™ncias sugeridas

Mike Cohn:

Livro cl√°ssico: Hist√≥rias de usu√°rios aplicadas (anos 2000).

Site: BetterStories.com

