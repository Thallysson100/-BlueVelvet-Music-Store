name: GitHub Projects Automation

on:
  issues:
    types: [opened, edited, closed]

jobs:
  update-projects:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Handle issues in Projects V2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |            
            (async () => {
              try {
                const owner = context.repo.owner;
                const repo = context.repo.repo;
                const issueNumber = context.issue.number;
            
                // -----------------------------
                // CONFIGURAÇÃO: IDs do projeto
                // -----------------------------
                const PROJECT_ID        = "PVT_kwHOCkTTTs4BCts3";
                const STATUS_FIELD_ID   = "PVTSSF_lAHOCkTTTs4BCts3zg02C_4";
                const OPTION_BACKLOG_ID = "f75ad846";
                const OPTION_READY_ID   = "61e4505c";
                const OPTION_DONE_ID    = "98236657";
            
                // -----------------------------
                // 1) Buscar dados do issue
                // -----------------------------
                const issueQuery = `
                  query($owner:String!, $repo:String!, $number:Int!) {
                    repository(owner:$owner, name:$repo) {
                      issue(number:$number) {
                        id
                        number
                        title
                        state
                        labels(first:20){ nodes{ name } }
                        trackedIssues(first:50) { nodes { number state id } }
                        trackedInIssues(first:50) { 
                          nodes { 
                            number 
                            state 
                            id 
                            labels(first:20) { nodes { name } }
                          } 
                        }
                      }
                    }
                  }`;
            
                const iq = await github.graphql(issueQuery, { owner, repo, number: issueNumber });
                const issue = iq.repository.issue;
                const labels = (issue.labels.nodes || []).map(n => n.name);
            
                // -----------------------------
                // 2) Paginar todos os itens do projeto
                // -----------------------------
                async function getAllProjectItems(projectId) {
                  let allItems = [];
                  let cursor = null;
            
                  do {
                    const query = `
                      query($projectId: ID!, $first: Int!, $after: String) {
                        node(id:$projectId) {
                          ... on ProjectV2 {
                            items(first:$first, after:$after) {
                              pageInfo { hasNextPage endCursor }
                              nodes {
                                id
                                content { ... on Issue { number id state } }
                                fieldValues(first: 10) {
                                  nodes {
                                    ... on ProjectV2ItemFieldSingleSelectValue {
                                      field { ... on ProjectV2SingleSelectField { id } }
                                      optionId
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }`;
                    const res = await github.graphql(query, { projectId, first: 100, after: cursor });
                    const items = res.node.items.nodes || [];
                    allItems = allItems.concat(items);
                    cursor = res.node.items.pageInfo.hasNextPage ? res.node.items.pageInfo.endCursor : null;
                  } while (cursor);
            
                  return allItems;
                }
            
                // -----------------------------
                // 3) Procurar item do project para o issue
                // -----------------------------
                async function findProjectItemForIssue(issueNum = issue.number) {
                  const allItems = await getAllProjectItems(PROJECT_ID);
                  const found = allItems.find(it => it.content && it.content.number === issueNum);
                  return found || null;
                }
            
                // -----------------------------
                // 4) Adicionar issue ao project
                // -----------------------------
                async function addIssueToProject(issueId = issue.id) {
                  try {
                    const addMutation = `
                      mutation($projectId: ID!, $contentId: ID!) {
                        addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                          item { id }
                        }
                      }`;
                    const add = await github.graphql(addMutation, { projectId: PROJECT_ID, contentId: issueId });
                    return add.addProjectV2ItemById.item.id;
                  } catch (e) {
                    // Se já existe, buscar o item
                    return (await findProjectItemForIssue())?.id || null;
                  }
                }
            
                // -----------------------------
                // 5) Obter status atual do item
                // -----------------------------
                function getCurrentStatus(projectItem) {
                  if (!projectItem || !projectItem.fieldValues) return null;
                  
                  const statusField = projectItem.fieldValues.nodes.find(
                    fv => fv.field && fv.field.id === STATUS_FIELD_ID
                  );
                  
                  return statusField ? statusField.optionId : null;
                }
            
                // -----------------------------
                // 6) Atualizar campo Status do item
                // -----------------------------
                async function setStatus(projectItemId, optionId) {
                  const mutation = `
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { singleSelectOptionId: $optionId }
                      }) {
                        projectV2Item { id }
                      }
                    }`;
                  await github.graphql(mutation, {
                    projectId: PROJECT_ID,
                    itemId: projectItemId,
                    fieldId: STATUS_FIELD_ID,
                    optionId
                  });
                  console.log(`Status atualizado para option ${optionId}`);
                }
            
                // -----------------------------
                // 7) Processar User Story pai quando sub-issue é fechada
                // -----------------------------
                async function processParentUserStory() {
                  const parents = issue.trackedInIssues.nodes || [];
                  
                  for (const parent of parents) {
                    const parentLabels = (parent.labels.nodes || []).map(n => n.name);
                    
                    if (parentLabels.includes('user-story')) {
                      console.log(`Verificando user-story pai #${parent.number}`);
                      
                      // Buscar dados completos do pai
                      const parentQuery = `
                        query($owner:String!, $repo:String!, $number:Int!) {
                          repository(owner:$owner, name:$repo) {
                            issue(number:$number) {
                              id
                              trackedIssues(first:50) { nodes { number state } }
                            }
                          }
                        }`;
                      
                      const pq = await github.graphql(parentQuery, { owner, repo, number: parent.number });
                      const parentIssue = pq.repository.issue;
                      const trackedIssues = parentIssue.trackedIssues.nodes || [];
                      const openSubIssues = trackedIssues.filter(si => si.state === "OPEN");
                      
                      if (trackedIssues.length > 0 && openSubIssues.length === 0) {
                        console.log(`Todas sub-issues do user-story #${parent.number} estão fechadas`);
                        
                        // Buscar ou adicionar o pai ao projeto
                        let parentProjectItem = await findProjectItemForIssue(parent.number);
                        if (!parentProjectItem) {
                          const parentItemId = await addIssueToProject(parent.id);
                          parentProjectItem = { id: parentItemId };
                        }
                        
                        if (parentProjectItem) {
                          await setStatus(parentProjectItem.id, OPTION_DONE_ID);
                          console.log(`User-story #${parent.number} movido para Done`);
                        }
                      } else {
                        console.log(`User-story #${parent.number} ainda tem ${openSubIssues.length} sub-issues abertas`);
                      }
                    }
                  }
                }
            
                // -----------------------------
                // 8) Lógica principal
                // -----------------------------
                
                // Buscar item existente no projeto
                let projectItem = await findProjectItemForIssue();
                let projectItemId = projectItem?.id;
                
                // Se não existe, adicionar ao projeto
                if (!projectItemId) {
                  projectItemId = await addIssueToProject();
                  if (!projectItemId) {
                    console.log(`Não foi possível obter project item para issue #${issue.number}.`);
                    return;
                  }
                  // Buscar o item recém-criado para obter o status atual
                  projectItem = await findProjectItemForIssue();
                }
            
                // CORREÇÃO 1: Para tasks, só mover para Ready se estiver OPEN
                if (labels.includes('task')) {
                  console.log(`Issue #${issue.number} tem label task`);
                  
                  if (issue.state === "OPEN") {
                    const currentStatus = getCurrentStatus(projectItem);
                    
                    // Só mover para Ready se não estiver em Done
                    if (currentStatus !== OPTION_DONE_ID) {
                      console.log(`Task está aberta → movendo para Ready`);
                      await setStatus(projectItemId, OPTION_READY_ID);
                    } else {
                      console.log(`Task está em Done, mantendo status`);
                    }
                  } else if (issue.state === "CLOSED") {
                    console.log(`Task está fechada → movendo para Done`);
                    await setStatus(projectItemId, OPTION_DONE_ID);
                    
                    // CORREÇÃO 2: Verificar se o pai (user-story) deve ir para Done
                    await processParentUserStory();
                  }
                  
                  return;
                }
            
                // Para user-stories
                if (labels.includes('user-story')) {
                  console.log(`Issue #${issue.number} é user-story`);
                  const tracked = issue.trackedIssues.nodes || [];
                  const openTracked = tracked.filter(si => si.state === "OPEN");
                  
                  if (issue.state === "CLOSED") {
                    // Se a própria user-story foi fechada, mover para Done
                    console.log(`User-story fechada → movendo para Done`);
                    await setStatus(projectItemId, OPTION_DONE_ID);
                  } else if (tracked.length > 0 && openTracked.length === 0) {
                    // Se todas as sub-issues estão fechadas, mover para Done
                    console.log(`Todas sub-issues fechadas → movendo user-story para Done`);
                    await setStatus(projectItemId, OPTION_DONE_ID);
                  } else {
                    // Caso contrário, manter em Backlog
                    console.log(`User-story tem ${openTracked.length} sub-issues abertas → mantendo em Backlog`);
                    await setStatus(projectItemId, OPTION_BACKLOG_ID);
                  }
                  
                  return;
                }
            
                console.log(`Issue #${issue.number} não tem label task nem user-story → nada a fazer.`);
            
              } catch (err) {
                console.log("Erro no script:", err);
                throw err;
              }
            })();
