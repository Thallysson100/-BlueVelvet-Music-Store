name: GitHub Projects Automation

on:
  issues:
    types: [opened, edited, closed]

jobs:
  update-projects:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Handle issues in Projects V2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // IDs das colunas do Project V2
            const BACKLOG_COLUMN_ID = "f75ad846";
            const READY_COLUMN_ID = "61e4505c";
            const DONE_COLUMN_ID = "98236657";

            // Consulta issue e sub-issues
            const query = `
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $number) {
                    id
                    title
                    state
                    labels(first:10){ nodes{ name } }
                    trackedIssues(first:50){ nodes{ number state id } }
                  }
                }
              }
            `;
            const result = await github.graphql(query, { owner, repo, number: issueNumber });
            const issue = result.repository.issue;
            const labels = issue.labels.nodes.map(l => l.name);

            // Função para adicionar item ao Project V2
            async function addItemToColumn(columnId) {
              await github.graphql(`
                mutation($columnId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $columnId, contentId: $contentId}) {
                    item { id }
                  }
                }
              `, { columnId, contentId: issue.id });
              console.log(`✅ Issue #${issueNumber} adicionada à coluna.`);
            }

            // Função para mover item no Project V2
            async function moveItem(columnId) {
              await github.graphql(`
                mutation($itemId: ID!, $columnId: ID!) {
                  moveProjectV2Item(input: {itemId: $itemId, destinationId: $columnId}) {
                    clientMutationId
                  }
                }
              `, { itemId: issue.id, columnId });
              console.log(`✅ Issue #${issueNumber} movida para a coluna.`);
            }

            // Workflow: user-story → Backlog, task → Ready
            if (labels.includes('user-story')) {
              console.log(`User-story #${issueNumber} → Backlog`);
              await addItemToColumn(BACKLOG_COLUMN_ID);
            }

            if (labels.includes('task')) {
              console.log(`Task #${issueNumber} → Ready`);
              await addItemToColumn(READY_COLUMN_ID);
            }

            // Se for user-story, checa sub-issues
            if (labels.includes('user-story')) {
              const subIssues = issue.trackedIssues.nodes;
              const openSubIssues = subIssues.filter(si => si.state === "OPEN");

              if (openSubIssues.length === 0 && subIssues.length > 0) {
                console.log(`✅ Todas as sub-issues fechadas. Move user-story #${issueNumber} → Done.`);
                await moveItem(DONE_COLUMN_ID);
              } else {
                console.log(`⏳ User-story #${issueNumber} ainda tem ${openSubIssues.length} sub-issues abertas.`);
              }
            }
